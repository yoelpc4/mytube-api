// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int            @id @default(autoincrement())
  name                    String         @db.VarChar(255)
  username                String         @unique @db.VarChar(255)
  email                   String         @unique @db.VarChar(255)
  password                String         @db.VarChar(255)
  profileBasename         String?        @db.VarChar(255)
  bannerBasename          String?        @db.VarChar(255)
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  refreshToken            RefreshToken?
  channelSubscriptions    Subscription[] @relation("channelSubscription")
  subscriberSubscriptions Subscription[] @relation("subscriberSubscription")
  contents                Content[]
  viewedContents          ContentView[]
  likedContents           ContentLike[]

  @@map("users")
}

model ResetPassword {
  id        String   @id @default(uuid()) @db.VarChar(36)
  email     String   @db.VarChar(255)
  token     String   @db.VarChar(255)
  createdAt DateTime @default(now())

  @@index([email])
  @@map("reset_passwords")
}

model RefreshToken {
  id     String @id @default(uuid()) @db.VarChar(36)
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
  token  String @db.VarChar(255)

  @@map("refresh_tokens")
}

model Subscription {
  id           Int      @id @default(autoincrement())
  channelId    Int
  channel      User     @relation("channelSubscription", fields: [channelId], references: [id])
  subscriberId Int
  subscriber   User     @relation("subscriberSubscription", fields: [subscriberId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([channelId, subscriberId])
  @@map("subscriptions")
}

model Content {
  id                Int           @id @default(autoincrement())
  title             String        @db.VarChar(255)
  description       String?
  videoBasename     String        @db.VarChar(255)
  tags              String?       @db.VarChar(255)
  status            ContentStatus @default(DRAFT)
  thumbnailBasename String?       @db.VarChar(255)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  createdBy         User          @relation(fields: [createdById], references: [id])
  createdById       Int
  contentViews      ContentView[]
  contentLikes      ContentLike[]

  @@map("contents")
}

model ContentView {
  id        Int      @id @default(autoincrement())
  content   Content  @relation(fields: [contentId], references: [id])
  contentId Int
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contentId, userId])
  @@map("content_views")
}

model ContentLike {
  id        Int      @id @default(autoincrement())
  content   Content  @relation(fields: [contentId], references: [id])
  contentId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  isLike    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contentId, userId])
  @@map("content_likes")
}

enum ContentStatus {
  DRAFT
  PUBLISHED
}
